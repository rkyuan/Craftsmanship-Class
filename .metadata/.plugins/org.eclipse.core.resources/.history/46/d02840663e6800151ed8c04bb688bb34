package orange;

import java.math.BigInteger;
import java.util.Optional;
import java.util.Set;

import orange.ProductException.ErrorCode;

public class Opod extends AbstractProduct{
	Opod(){
		super();
	}

	public Opod(SerialNumber serialNumber, Optional<Set<String>> description) {
		super(serialNumber, description);
		// TODO Auto-generated constructor stub
	}
	public static boolean isValidSerialNumber(SerialNumber s){
		return (s.isEven()&&!s.testBit(2));
	}
	public ProductType getProductType(){
		return ProductType.OPOD;
		
	}

	@Override
	public boolean checkNum(SerialNumber s) {
		return Opod.isValidSerialNumber(s);
	}

	@Override
	public Product makeOther(SerialNumber serialNumber,
			Optional<Set<String>> description) {
		return new Opod(serialNumber,description);
	}
	
	@Override
	public void process(Refund request, RequestStatus status)
			throws ProductException {
		if (getSerialNumber().getSerialNumber().gcd(request.getRma()).compareTo(new BigInteger("24"))>0){
			status.setScode(RequestStatus.StatusCode.OK);
		}
		//don't know what to do with result
	}
	@Override
	public void process(Exchange request, RequestStatus status)
			throws ProductException {
		for(SerialNumber s : request.getCompatibleProducts()){
			if(Opod.isValidSerialNumber(s)){
				status.setScode(RequestStatus.StatusCode.OK);
				status.setResult(Optional.of(s.getSerialNumber()));
				return;
			}
		}
		status.setScode(RequestStatus.StatusCode.FAIL);
		return;
		
	}

}
